import Config

# Load environment variables from .env file
env_file_path = Path.join([__DIR__, "..", ".env"])
if File.exists?(env_file_path) do
  File.stream!(env_file_path)
  |> Stream.map(&String.trim/1)
  |> Stream.filter(&(&1 != "" && !String.starts_with?(&1, "#")))
  |> Stream.map(fn line ->
    [key, value] = String.split(line, "=", parts: 2)
    {String.trim(key), String.trim(value)}
  end)
  |> Enum.each(fn {key, value} -> System.put_env(key, value) end)
else
  IO.puts("Warning: .env file not found at #{env_file_path}")
end

# Configure your database
config :ra_backend, RaBackend.Repo,
  username: "postgres",
  password: "postgres",
  hostname: "localhost",
  port: 5433,
  database: "ra_backend_dev",
  stacktrace: true,
  show_sensitive_data_on_connection_error: true,
  pool_size: 10

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :ra_backend, RaBackendWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {127, 0, 0, 1}, port: 4000],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "MCPrDSQizYLD5uQQzHYPzZgRgcVGuJw6QOCTJ+Dnw8q7CIH8M40BsYD1WiJCQ+I8",
  watchers: [
    esbuild: {Esbuild, :install_and_run, [:ra_backend, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:ra_backend, ~w(--watch)]}
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :ra_backend, RaBackendWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/(?!uploads/).*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/ra_backend_web/(controllers|live|components)/.*(ex|heex)$"
    ]
  ]

# Enable dev routes for dashboard and mailbox
config :ra_backend, dev_routes: true

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

config :phoenix_live_view,
  # Include HEEx debug annotations as HTML comments in rendered markup
  debug_heex_annotations: true,
  # Enable helpful, but potentially expensive runtime checks
  enable_expensive_runtime_checks: true

# Disable swoosh api client as it is only required for production adapters.
config :swoosh, :api_client, false

# Configure LLM providers for development
config :ra_backend, :llm_providers,
  openai: [
    api_key: System.get_env("OPENAI_API_KEY") || "dummy_key_for_dev",
    base_url: System.get_env("OPENAI_BASE_URL") || "https://api.openai.com/v1"
  ],
  anthropic: [
    api_key: System.get_env("ANTHROPIC_API_KEY") || "dummy_key_for_dev",
    base_url: System.get_env("ANTHROPIC_BASE_URL") || "https://api.anthropic.com/v1"
  ],
  gemini: [
    api_key: System.get_env("GEMINI_API_KEY") || "dummy_key_for_dev",
    base_url: System.get_env("GEMINI_BASE_URL") || "https://generativelanguage.googleapis.com/v1beta"
  ]
